{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Saland Adventures This is a game about exploration and building a world while traveling.","title":"Saland Adventures"},{"location":"#saland-adventures","text":"This is a game about exploration and building a world while traveling.","title":"Saland Adventures"},{"location":"console/","text":"Console The console can be started in game by pressing Shift+Esc . Commands help help [COMMAND] This command will show all the possible commands. It takes an optional parameter to show the help page for that command. Example: help config goto goto X Y Loads a given region and spawns the player in that region. Useful if you want to go to a specific region and see how it plays. Note that X and Y are signed integeres. Example: goto 5 -4 quit Quits the game reset_region This command will delete the current region and restore it like you just entered it for the first time. tiled This will write the current map to disc and try to launch tiled on it. Once tiled is closed the map will be reloaded. If tiled is not found then the current map will simply be reloaded.","title":"Console"},{"location":"console/#console","text":"The console can be started in game by pressing Shift+Esc .","title":"Console"},{"location":"console/#commands","text":"","title":"Commands"},{"location":"console/#help","text":"help [COMMAND] This command will show all the possible commands. It takes an optional parameter to show the help page for that command. Example: help config","title":"help"},{"location":"console/#goto","text":"goto X Y Loads a given region and spawns the player in that region. Useful if you want to go to a specific region and see how it plays. Note that X and Y are signed integeres. Example: goto 5 -4","title":"goto"},{"location":"console/#quit","text":"Quits the game","title":"quit"},{"location":"console/#reset_region","text":"This command will delete the current region and restore it like you just entered it for the first time.","title":"reset_region"},{"location":"console/#tiled","text":"This will write the current map to disc and try to launch tiled on it. Once tiled is closed the map will be reloaded. If tiled is not found then the current map will simply be reloaded.","title":"tiled"},{"location":"development_version/","text":"Development version Windows nightly builds can be found here: Windows nightly For Linux the easiest option is to compile it from source . It goes like this: git checkout https://github.com/salandgame/saland.git cd saland cmake . make #./saland # to run","title":"Development version"},{"location":"development_version/#development-version","text":"Windows nightly builds can be found here: Windows nightly For Linux the easiest option is to compile it from source . It goes like this: git checkout https://github.com/salandgame/saland.git cd saland cmake . make #./saland # to run","title":"Development version"},{"location":"development_info/libraries/","text":"Libraries Some of the dependencies and the justification for using them Dependencies SDL 2 Homepage This is the fundation of all my C++ games. It cross compiles and is relatively easy to pack. In contrast to other native C++ libraries like SFML, RAII is not included by default. However, while working with SFML I found that I ended up with my own RAII layer anyway. SDL2_gfx Homepage Easily mistaken for an actual part of SDL2. It is that conformaty which makes it attractive. PhysFS Homepage This is the library used for abstracting the file system. The system is strongly inspired by the system used by Quake 3. It is also fantiastic for mod support. boost_program_options Homepage Used to parse program options from command line or config file. Primarily used because I like the format for saland -h . There are other libraries that does the same but I prefer the boost option if it is availeble. boost (headers) Homepage For basic algorithms I turn to boost. Used tokenizer and predicate. It is big dependency in size but I find the number of dependencies to be more problematic than the size. Bundled Box2d Homepage This is used for the physics. Using physics in a top down game gives a feeling of pushing things around that I like. I include box2d as a bundled dependency. The reason is that Box2d does not guarentee compatibility between even versions. Even minor versions might break the API. b64 Homepage (Debian patches) Used for base64 encoding and decoding for the Tiled format. During development I got depended on some of the Debian changes. There is an unmerged patch on the SalesForce project and without that patch everything breaks horrible. Buffer overflows are a major problem in C and b64 is very prone to them without the patch. utf8cpp Homepage The nononse working version of UTF-8 for C++. The biggest problem with this library is that Linux distribution package it differently and MXE.cc does not pack it at all. Therefore the library is also bundled. rapidxml Homepage Used by the homemade tiled-library. This is a header only. I have experieced some version compatibility trouble while working with Cereal, so I embed a specific version. rapidjson Homepage Used by the commen \"sago\" files shared with Block Attack - Rise of the Blocks. Bundled due to compatiblity concers found in Cereal. PlatformFolders Homepage My own library for handling access to Save games folders on different platforms. While this was designed with backwards compatibility in mind. I always assumed that it would get embedded.","title":"Libraries"},{"location":"development_info/libraries/#libraries","text":"Some of the dependencies and the justification for using them","title":"Libraries"},{"location":"development_info/libraries/#dependencies","text":"","title":"Dependencies"},{"location":"development_info/libraries/#sdl-2","text":"Homepage This is the fundation of all my C++ games. It cross compiles and is relatively easy to pack. In contrast to other native C++ libraries like SFML, RAII is not included by default. However, while working with SFML I found that I ended up with my own RAII layer anyway.","title":"SDL 2"},{"location":"development_info/libraries/#sdl2_gfx","text":"Homepage Easily mistaken for an actual part of SDL2. It is that conformaty which makes it attractive.","title":"SDL2_gfx"},{"location":"development_info/libraries/#physfs","text":"Homepage This is the library used for abstracting the file system. The system is strongly inspired by the system used by Quake 3. It is also fantiastic for mod support.","title":"PhysFS"},{"location":"development_info/libraries/#boost_program_options","text":"Homepage Used to parse program options from command line or config file. Primarily used because I like the format for saland -h . There are other libraries that does the same but I prefer the boost option if it is availeble.","title":"boost_program_options"},{"location":"development_info/libraries/#boost-headers","text":"Homepage For basic algorithms I turn to boost. Used tokenizer and predicate. It is big dependency in size but I find the number of dependencies to be more problematic than the size.","title":"boost (headers)"},{"location":"development_info/libraries/#bundled","text":"","title":"Bundled"},{"location":"development_info/libraries/#box2d","text":"Homepage This is used for the physics. Using physics in a top down game gives a feeling of pushing things around that I like. I include box2d as a bundled dependency. The reason is that Box2d does not guarentee compatibility between even versions. Even minor versions might break the API.","title":"Box2d"},{"location":"development_info/libraries/#b64","text":"Homepage (Debian patches) Used for base64 encoding and decoding for the Tiled format. During development I got depended on some of the Debian changes. There is an unmerged patch on the SalesForce project and without that patch everything breaks horrible. Buffer overflows are a major problem in C and b64 is very prone to them without the patch.","title":"b64"},{"location":"development_info/libraries/#utf8cpp","text":"Homepage The nononse working version of UTF-8 for C++. The biggest problem with this library is that Linux distribution package it differently and MXE.cc does not pack it at all. Therefore the library is also bundled.","title":"utf8cpp"},{"location":"development_info/libraries/#rapidxml","text":"Homepage Used by the homemade tiled-library. This is a header only. I have experieced some version compatibility trouble while working with Cereal, so I embed a specific version.","title":"rapidxml"},{"location":"development_info/libraries/#rapidjson","text":"Homepage Used by the commen \"sago\" files shared with Block Attack - Rise of the Blocks. Bundled due to compatiblity concers found in Cereal.","title":"rapidjson"},{"location":"development_info/libraries/#platformfolders","text":"Homepage My own library for handling access to Save games folders on different platforms. While this was designed with backwards compatibility in mind. I always assumed that it would get embedded.","title":"PlatformFolders"},{"location":"development_info/sprites/","text":"Sprites The sprites are located in data/sprites/*.sprite They are json files which looks like this: { \"item_food_potato\" : { \"texture\" : \"food\", \"topx\" : 0, \"topy\" : 0, \"height\" : 32, \"width\" : 32, \"originx\" : 16, \"originy\" : 16 } } In this case: name meaning type item_food_potato This is the name of the sprite Object representing the sprite texture The texture refering. \"food\" means \"data/textures/food.png\" string topx The topx cooridinate of the top-left cornor of the sprite in the texture int topy The topy cooridinate of the top-left cornor of the sprite in the texture int height Height of the sprite int width Width of a frame in the sprite int originx There the engine starts drawing. Defaults to 0 float originy There the engine starts drawing. Defaults to 0 float","title":"Sprites"},{"location":"development_info/sprites/#sprites","text":"The sprites are located in data/sprites/*.sprite They are json files which looks like this: { \"item_food_potato\" : { \"texture\" : \"food\", \"topx\" : 0, \"topy\" : 0, \"height\" : 32, \"width\" : 32, \"originx\" : 16, \"originy\" : 16 } } In this case: name meaning type item_food_potato This is the name of the sprite Object representing the sprite texture The texture refering. \"food\" means \"data/textures/food.png\" string topx The topx cooridinate of the top-left cornor of the sprite in the texture int topy The topy cooridinate of the top-left cornor of the sprite in the texture int height Height of the sprite int width Width of a frame in the sprite int originx There the engine starts drawing. Defaults to 0 float originy There the engine starts drawing. Defaults to 0 float","title":"Sprites"},{"location":"development_info/tiled/","text":"Tiled Saland uses tmx files for Tiled . There are some requirements to how the files need to look in order for them to work. Implementation The layer order is currently defined in src/saland/model/World.cpp Layers prefab_marking Marks the prefabs. This is a collection of several tiles like a house. Prefabs are copied to the map once placed, so updating the templete has no effect. Any tile touched by a rectangle on the prefab_marking layer are considered protected and managed by the prefab system. mutableObjects This layer contains the elements which the game itself uses to make the world consistent. Element on this layer can be removed or added by the engine. Examples for this is: Trees, barrels etc. Some elements (barrels, trees) blocks the player. object1 This layer contains some static objects. Objects on this layer: Type Condition Effect Retangle type = \"protectedRegion\" Tells the engine to not allow the player to do any changes. The reqion is protected overlay_1 A layer drawn above the player layer. Can be used for cieling bars or signposts. This layer is currently ignored by the engine. prefab_overlay_1 Tiles on this layer are managed by the prefab system. Any tile on this layer should be protected by the prefab_marking-layer. blocking_overlay_1 Managed by the engine. The engine might put elements which belongs to the blocking layer. This is used by some tiles which needs an extra layer to blend correctly. prefab_blocking_2 A blocking layer managed by the prefab system. Any tile on this layer should be protected by the prefab_marking-layer. blocking This is the blocking layer. All tiles on this layer blocks the player. The engine may change this layer. prefab_ground_1 A ground layer managed by the prefab system. Any tile on this layer should be protected by the prefab_marking-layer. ground_2 The layer below the ground blocking layer. Might be managed by the engine in the future ground_1 The lowest layer. The engine will not change this.","title":"Tiled"},{"location":"development_info/tiled/#tiled","text":"Saland uses tmx files for Tiled . There are some requirements to how the files need to look in order for them to work.","title":"Tiled"},{"location":"development_info/tiled/#implementation","text":"The layer order is currently defined in src/saland/model/World.cpp","title":"Implementation"},{"location":"development_info/tiled/#layers","text":"","title":"Layers"},{"location":"development_info/tiled/#prefab_marking","text":"Marks the prefabs. This is a collection of several tiles like a house. Prefabs are copied to the map once placed, so updating the templete has no effect. Any tile touched by a rectangle on the prefab_marking layer are considered protected and managed by the prefab system.","title":"prefab_marking"},{"location":"development_info/tiled/#mutableobjects","text":"This layer contains the elements which the game itself uses to make the world consistent. Element on this layer can be removed or added by the engine. Examples for this is: Trees, barrels etc. Some elements (barrels, trees) blocks the player.","title":"mutableObjects"},{"location":"development_info/tiled/#object1","text":"This layer contains some static objects. Objects on this layer: Type Condition Effect Retangle type = \"protectedRegion\" Tells the engine to not allow the player to do any changes. The reqion is protected","title":"object1"},{"location":"development_info/tiled/#overlay_1","text":"A layer drawn above the player layer. Can be used for cieling bars or signposts. This layer is currently ignored by the engine.","title":"overlay_1"},{"location":"development_info/tiled/#prefab_overlay_1","text":"Tiles on this layer are managed by the prefab system. Any tile on this layer should be protected by the prefab_marking-layer.","title":"prefab_overlay_1"},{"location":"development_info/tiled/#blocking_overlay_1","text":"Managed by the engine. The engine might put elements which belongs to the blocking layer. This is used by some tiles which needs an extra layer to blend correctly.","title":"blocking_overlay_1"},{"location":"development_info/tiled/#prefab_blocking_2","text":"A blocking layer managed by the prefab system. Any tile on this layer should be protected by the prefab_marking-layer.","title":"prefab_blocking_2"},{"location":"development_info/tiled/#blocking","text":"This is the blocking layer. All tiles on this layer blocks the player. The engine may change this layer.","title":"blocking"},{"location":"development_info/tiled/#prefab_ground_1","text":"A ground layer managed by the prefab system. Any tile on this layer should be protected by the prefab_marking-layer.","title":"prefab_ground_1"},{"location":"development_info/tiled/#ground_2","text":"The layer below the ground blocking layer. Might be managed by the engine in the future","title":"ground_2"},{"location":"development_info/tiled/#ground_1","text":"The lowest layer. The engine will not change this.","title":"ground_1"}]}